{"version":3,"sources":["firebaseUsersLocation.js","WeatherData.js","Header.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","WeatherData","toggleWeatherForecast","e","target","textContent","setState","showForecast","state","this","props","weatherLoc","currentWeathCondition","currentWeath","temp_c","precipText","precip_mm","windText","wind_kph","humidText","humidity","className","onClick","firebaseAddFunc","forecastData","map","dayObj","date","day","condition","text","maxtemp_c","mintemp_c","totalprecip_mm","date_epoch","Component","Header","scrollFunc","Footer","App","handleInputChange","userInput","value","charAt","toUpperCase","slice","handleSubmit","preventDefault","callWeatherAPI","callUnsplashImgAPI","city","axios","method","url","dataResponse","params","key","q","days","then","apiData","filterWeatherData","data","showWeather","catch","err","alert","origWeatherData","forecastApiData","forecast","forecastday","weatherLocationFullName","location","name","country","currentCondition","current","currentApiData","currentHumid","currentWindSpeed","currentPrecip","weatherLocation","currentWeatherData","currentConditionData","forecastWeatherData","client_id","query","orientation","weatherLocationBg","results","urls","regular","getAppStyle","backgroundImage","scrollToWeather","weatherSection","scrollIntoView","behavior","storeLocation","dbRef","database","ref","locationTextArray","locations","forEach","element","push","indexOf","removeLocation","locId","child","remove","loadPreviousCity","storeUserLocationFB","on","firebaseDataObj","val","locationArray","propertyKey","formattedObj","id","backgroundStyle","style","el","onSubmit","htmlFor","type","placeholder","onChange","loc","href","bgSrc","weatherForecast","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7bdbc04.chunk.js","sourcesContent":["// FIREBASE IMPORT\r\n// used to store the users inputted location for future use if they desire \r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAzgD0kXpjPIfhvWKOTTAPmM6nUKUH4tNI\",\r\n    authDomain: \"ben-sarjeant-project-5.firebaseapp.com\",\r\n    databaseURL: \"https://ben-sarjeant-project-5.firebaseio.com\",\r\n    projectId: \"ben-sarjeant-project-5\",\r\n    storageBucket: \"ben-sarjeant-project-5.appspot.com\",\r\n    messagingSenderId: \"294499551721\",\r\n    appId: \"1:294499551721:web:5cbbb09952bf2f8b72e378\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","// WeatherData class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass WeatherData extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            showForecast: false\r\n        }\r\n    }\r\n\r\n    // function to toggle the forecast \r\n    toggleWeatherForecast = (e) => {\r\n        if (e.target.textContent === \"Show Forecast\") {\r\n            this.setState({\r\n                showForecast: true\r\n            })\r\n            e.target.textContent = \"Hide Forecast\"\r\n        } else if (e.target.textContent === \"Hide Forecast\") {\r\n            this.setState({\r\n                showForecast: false\r\n            })\r\n            e.target.textContent = \"Show Forecast\"\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <>\r\n                {/* Setting the dom to reflect weather api data */}\r\n                <h2>{this.props.weatherLoc}</h2>\r\n                <h3>{this.props.currentWeathCondition} | {this.props.currentWeath.temp_c}Â°C </h3>\r\n                <p>Precipitation: {this.props.currentWeath.precipText} ({this.props.currentWeath.precip_mm}mm)</p>\r\n                <p>Wind: {this.props.currentWeath.windText} ({this.props.currentWeath.wind_kph}kph)</p>\r\n                <p>Humidity: {this.props.currentWeath.humidText} ({this.props.currentWeath.humidity}%)</p>    \r\n                \r\n                {/* Button used to fire storeLocation on click */}\r\n                <button className=\"saveLocationButton\" onClick={this.props.firebaseAddFunc}>Save Location</button> \r\n                \r\n                {/* Button to fire the function toggleWeatherForecast on click */}\r\n                <button onClick={this.toggleWeatherForecast} className=\"showForecastButton\">Show Forecast</button>\r\n\r\n                {/* Div holding the forecast if the user wants */}\r\n                <div className={this.state.showForecast ? 'show' : 'hide'}>\r\n                    {\r\n                        this.props.forecastData.map((dayObj) => {\r\n                            return (\r\n                                <div className=\"forecastDayContainer\" key={dayObj.date_epoch}>\r\n                                    <h3>{dayObj.date}</h3>\r\n                                    <h4>{dayObj.day.condition.text}</h4>\r\n                                    <p>High: {dayObj.day.maxtemp_c}Â°C</p>\r\n                                    <p>Low: {dayObj.day.mintemp_c}Â°C</p>\r\n                                    <p>Precip: {dayObj.day.totalprecip_mm}mm</p>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n                \r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default WeatherData; ","// Header class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Header extends Component {\r\n    render() { \r\n        return (\r\n            <header>\r\n                <div className=\"wrapper headerFlexChild\">\r\n                    <h1>Check out some weather!</h1>\r\n                    {/* Header gets passed a function to scroll the user to the form when chevron down is clicked  */}\r\n                    <i onClick={() => { this.props.scrollFunc() }} className=\"fas fa-chevron-down chevron\"></i>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","// Header class component\r\nimport { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <p>Copyright Â© Ben Sarjeant | Juno College </p>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","// General App Functionality Description\r\n// Loads current and forecasted weather based off users input (https://www.weatherapi.com/)\r\n// Changes background of results screen based off users input (https://unsplash.com/)\r\n// Ben Sarjeant | Juno College 2020\r\n\r\n// General Imports\r\nimport { Component, Fragment } from 'react';\r\nimport './App.js';\r\nimport './App.css';\r\n// NPM Installs\r\nimport firebase from './firebaseUsersLocation.js';\r\nimport axios from 'axios';\r\n// Class Components\r\nimport WeatherData from './WeatherData.js';\r\nimport Header from './Header.js';\r\nimport Footer from './Footer.js';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      locations: [],\r\n      currentWeatherData: [],\r\n      forecastWeatherData: [],\r\n      weatherLocation: '',\r\n      userInput: '',\r\n      weatherLocationBg: 'url(./cloudsTwo.jpg)',\r\n      currentConditionData: '',\r\n      showWeather: false\r\n    }\r\n  }\r\n\r\n  // On mount load function that retrieves list of previously saved locations from firebase\r\n  componentDidMount() {\r\n    this.storeUserLocationFB();\r\n  }\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      // converting user input to have a capitalized first letter\r\n      userInput: e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1)\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    // call both api requests based off of the user input received from the input change\r\n    this.callWeatherAPI(`${this.state.userInput}`);\r\n    this.callUnsplashImgAPI(`${this.state.userInput}`);\r\n  }\r\n\r\n  // Firebase: Function to retrieve list of previously entered locations from Firebase\r\n  storeUserLocationFB() {\r\n    const dbRef = firebase.database().ref()\r\n    dbRef.on('value', (data) => {\r\n      const firebaseDataObj = data.val();\r\n      let locationArray = [];\r\n      for (let propertyKey in firebaseDataObj) {\r\n        const propertyVal = firebaseDataObj[propertyKey];\r\n        const formattedObj = {\r\n          id: propertyKey,\r\n          name: propertyVal\r\n        }\r\n        locationArray.push(formattedObj)\r\n      }\r\n      this.setState({\r\n        locations: locationArray,\r\n      })\r\n    })\r\n  }\r\n  // End of Firebase function\r\n\r\n  // WeatherAPI: Calling to retrieve weather data when user clicks submit button\r\n  // Function takes the city which is derieved from the users input above\r\n  // Throws error in console regardless of catch if user inputs random string (not a city)\r\n  callWeatherAPI = (city) => {\r\n    axios({\r\n      method: 'GET',\r\n      url: 'https://api.weatherapi.com/v1/forecast.json',\r\n      dataResponse: 'json',\r\n      params: {\r\n        key: '29c5ceb051fc45c29ac204434202611',\r\n        q: city,\r\n        days: 3\r\n      }\r\n    }).then((apiData) => {\r\n      this.filterWeatherData(apiData.data);    \r\n      this.setState({\r\n        showWeather: true\r\n      })\r\n     // document.getElementById('weatherDataContainer').style.display = 'flex';\r\n    }).catch(err => {\r\n      alert(\"No data for that city, please try again.\") \r\n    })\r\n  }\r\n\r\n  // Filtering weather data to add specific text to DOM and retrieved weather array\r\n  // Contains series of conditionals to add some text based off of retrieved weather values\r\n  filterWeatherData = (origWeatherData) => {\r\n\r\n    // variables used in setState at end of function\r\n    const forecastApiData = origWeatherData.forecast.forecastday;\r\n    const weatherLocationFullName = origWeatherData.location.name + ', ' + origWeatherData.location.country;\r\n    const currentCondition = origWeatherData.current.condition.text;\r\n    \r\n    // variables used in conditionals\r\n    // currentApiData holds all the relevant info\r\n    let currentApiData = origWeatherData.current;\r\n    let currentHumid = origWeatherData.current.humidity;\r\n    let currentWindSpeed = origWeatherData.current.wind_kph;\r\n    let currentPrecip = origWeatherData.current.precip_mm;\r\n\r\n    // conditionals for precipitation \r\n    if (currentPrecip >= 20) {\r\n      currentApiData = { ...currentApiData, precipText: \"Hurricane Rain\" };\r\n    } else if (currentPrecip < 20 & currentPrecip >= 10) {\r\n      currentApiData = { ...currentApiData, precipText: \"Pouring\" };\r\n    } else if (currentPrecip < 10 & currentPrecip >= 4) {\r\n      currentApiData = { ...currentApiData, precipText: \"Raining\" };\r\n    } else if (currentPrecip < 4 & currentPrecip >= 0.1) {\r\n      currentApiData = { ...currentApiData, precipText: \"Drizzling\" };\r\n    } else {\r\n      currentApiData = { ...currentApiData, precipText: \"No Rain\" }\r\n    }\r\n\r\n    //conditionals for wind speed\r\n    if (currentWindSpeed >= 60) {\r\n      currentApiData = { ...currentApiData, windText: \"Hurricane Winds\" };\r\n    } else if (currentWindSpeed < 60 & currentWindSpeed >= 30) {\r\n      currentApiData = { ...currentApiData, windText: \"Windy\" };\r\n    } else if (currentWindSpeed < 30 & currentWindSpeed >= 15) {\r\n      currentApiData = { ...currentApiData, windText: \"Breezy\" };\r\n    } else {\r\n      currentApiData = { ...currentApiData, windText: \"Little to no wind\" }\r\n    }\r\n\r\n    // conditionals for humidity\r\n    if (currentHumid >= 85) {\r\n      currentApiData = { ...currentApiData, humidText: \"Very humid\" };\r\n    } else if (currentHumid < 85 & currentHumid >= 50) {\r\n      currentApiData = { ...currentApiData, humidText: \"Humid\" };\r\n    } else if (currentHumid < 50 & currentHumid >= 15) {\r\n      currentApiData = { ...currentApiData, humidText: \"Not Very Humid\" };\r\n    } else {\r\n      currentApiData = { ...currentApiData, humidText: \"No Humidity\" }\r\n    }\r\n\r\n    // setting state to reflect updated weather obj\r\n    this.setState({\r\n      weatherLocation: weatherLocationFullName,\r\n      currentWeatherData: currentApiData,\r\n      currentConditionData: currentCondition,\r\n      forecastWeatherData: forecastApiData\r\n    });\r\n  }\r\n\r\n\r\n  // Calling the unsplash API to retrieve a background photo based off of the users requested location\r\n  callUnsplashImgAPI = (city) => {\r\n    const unsplashPhotoKey = 'ZxjN4qAJgh0cJ5Lz2Lm47cXNiqzVZVZ69KLm5386GtM';\r\n    axios({\r\n      method: 'GET',\r\n      url: 'https://api.unsplash.com/search/photos',\r\n      dataResponse: 'json',\r\n      params: {\r\n        client_id: unsplashPhotoKey,\r\n        query: city,\r\n        orientation: 'landscape'\r\n      }\r\n    }).then((apiData) => {\r\n      // setting the state of the weather location background to that of the url retrieved from api\r\n      this.setState({\r\n        weatherLocationBg: apiData.data.results[0].urls.regular\r\n      })\r\n      \r\n    }).catch(err => {\r\n      // catching to ensure app won't break\r\n      // was logging the errors to console prior\r\n    })\r\n  }\r\n  // End of unsplash api call\r\n\r\n  // UPDATED to remove some bad react coding\r\n  // function to return updated background image \r\n  getAppStyle = () => {\r\n    return {\r\n      backgroundImage: `url(${this.state.weatherLocationBg})`,\r\n    }\r\n  }\r\n  \r\n  // Function to scroll down to the next section - called from chevron click in Header class component\r\n  scrollToWeather = () => {\r\n    this.weatherSection.scrollIntoView({ behavior: \"smooth\" });\r\n  }\r\n\r\n  // START of Firebase functions\r\n  // Function checks to see if value is already stored in database, if it is let user know otherwise store location\r\n  storeLocation = () => {\r\n    const dbRef = firebase.database().ref();\r\n    let locationTextArray = []\r\n    // iterating over locations (array holding current firebase items) and pushing the name, not the key to a new array\r\n    this.state.locations.forEach(element => {\r\n      locationTextArray.push(element.name)\r\n    });\r\n    // seeing if the user input exists in the new array\r\n    const indexOf = locationTextArray.indexOf(this.state.userInput);\r\n    if (indexOf >= 0) {\r\n      alert(\"This city is already a stored location!\")\r\n    } else {\r\n      dbRef.push(this.state.userInput)\r\n    }\r\n  }\r\n\r\n  // remove location when user selects the button marked with an X\r\n  removeLocation = (locId) => {\r\n    const dbRef = firebase.database().ref()\r\n    dbRef.child(locId).remove();\r\n  }\r\n\r\n  // load a stored location if user clicks on it - stored locations are shown as an <a> and fire this function on click\r\n  loadPreviousCity = (e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      userInput: e.target.text\r\n    })\r\n    this.callWeatherAPI(e.target.text);\r\n    this.callUnsplashImgAPI(e.target.text);\r\n  }\r\n  // End of Firebase functions\r\n\r\n\r\n  render() { \r\n    const backgroundStyle = this.getAppStyle();\r\n    return (\r\n      <Fragment>\r\n      \r\n        <Header scrollFunc={this.scrollToWeather} />\r\n      \r\n        {/* Main section used to change background */}\r\n        <section\r\n          className=\"weatherMain\"\r\n          style={backgroundStyle}\r\n          id=\"weatherSection\"\r\n          ref={(el) => { this.weatherSection = el; }}>\r\n\r\n          {/* Section containing all retrieved weather api info */}\r\n          <section className=\"requestedWeather\">\r\n\r\n            {/* Form for user input - handles api calls on submit */}\r\n            <form onSubmit={this.handleSubmit} className=\"weatherDataForm\">\r\n              <label htmlFor=\"userLocation\" className=\"srOnly\">location:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"userLocation\"\r\n                name=\"userLocation\"\r\n                placeholder=\"Search for a city\"\r\n                onChange={this.handleInputChange}\r\n              />\r\n              <button>Find Weather</button>\r\n            </form>\r\n\r\n            {/* Firebase stored locations */}\r\n            <p>Stored Locations</p>\r\n            <div className=\"firebaseStoredLocations\">\r\n              {\r\n                this.state.locations.map((loc) => {\r\n                  return (\r\n                    <li key={loc.id}>\r\n                      {/* On <a> click fire api call based on selected tag */}\r\n                      <a href=\"#weatherSection\" onClick={this.loadPreviousCity}>{loc.name}</a>\r\n                      {/* Button to remove stored location from firebase */}\r\n                      <button className=\"removeButton\" onClick={() => { this.removeLocation(loc.id) }}>X</button>\r\n                    </li>\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n\r\n            {/* Weather Data class component */}\r\n            <div className={this.state.showWeather ? 'weatherDataContainer' : 'hide'}>\r\n              <WeatherData\r\n                weatherLoc={this.state.weatherLocation}\r\n                currentWeathCondition={this.state.currentConditionData}\r\n                currentWeath={this.state.currentWeatherData}\r\n                bgSrc={this.state.weatherLocationBg}\r\n                firebaseAddFunc={this.storeLocation}\r\n                weatherForecast={this.toggleWeatherForecast}\r\n                forecastData={this.state.forecastWeatherData}\r\n              />\r\n            </div>\r\n            \r\n          </section>\r\n          {/* END OF requestedWeather SECTION */}\r\n\r\n        </section>\r\n        {/* END OF weatherMain SECTION  */}\r\n      \r\n        <Footer />\r\n\r\n      </Fragment>     \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}